@use '../../colors';

@function hex-setter($hex) {
  @if $hex == map-get(colors.$colors, "obsidian") {
    @return white;
  }
  @if $hex == map-get(colors.$colors, "royalblue") {
    @return cyan;
  }
  @return $hex;
}

@function multiple-box-shadow ($stars, $hex) {
  $value: '#{random(2000)}px #{random(2000)}px #{$hex}';
  @for $i from 2 through $stars {
    $value: '#{$value} , #{random(2000)}px #{random(2000)}px #{$hex}';
  }

  @return unquote($value);
}

@mixin stars-common($box-shadow, $dimension) {
  background: transparent;
  box-shadow: $box-shadow;
  height: $dimension;
  width: $dimension;
}

@mixin stars($num-stars, $delay, $dimension, $hex) {
  $box-shadow: multiple-box-shadow($num-stars, $hex);

  @include stars-common($box-shadow, $dimension);
  animation: animStar $delay linear infinite;

  &:after {
    @include stars-common($box-shadow, $dimension);

    content: " ";
    position: absolute;
    top: 2000px;
  }
}


@mixin bg {
  @each $color, $hex in colors.$colors {
    $hex: hex-setter($hex);

    .#{$color} {
      height: 100%;
      width: 100%;
      background: radial-gradient(ellipse at bottom, #1B2735 0%, #090A0F 100%);
      position: fixed;
      overflow: hidden;

      .stars {
        @include stars(700, 50s, 1px, $hex);
      }
          
      .stars2 {
        @include stars(200, 100s, 2px, $hex);
      }
          
      .stars3 {
        @include stars(100, 150s, 3px, $hex);
      }
    }
  }
}

@include bg;
    
@keyframes animStar {
  from {
    transform: translateY(0px);
  }
  to {
    transform: translateY(-2000px);
  }
}
    